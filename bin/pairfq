#!perl

use 5.010;
use strict;
use warnings;
use File::Basename;
use Getopt::Long;
use Pod::Usage;

our $VERSION = '0.18.0';

my $script = basename($0, ());
$script = "pairfq" if $script =~ /^-$|stdin/i;

my %usage_table = (
    'main'       => \&usage,
    'makepairs'  => \&makepairs_usage,
    'addinfo'    => \&addinfo_usage,
    'splitpairs' => \&splitpairs_usage,
    'joinpairs'  => \&joinpairs_usage,
);

my %opt;
GetOptions(\%opt,
	   'infile|i=s',
	   'outfile|o=s',      
	   'pairnum|p=i',      
	   'forward|f=s',      
	   'reverse|r=s',      
	   'forw_paired|fp=s', 
	   'rev_paired|rp=s',  
	   'forw_unpaired|fs=s',
	   'rev_unpaired|rs=s',
	   'index|idx',   
	   'compress|c=s',
	   'uppercase|uc',
	   'stats|s', 
	   'version',
	   'help|h', 
	   'man|m',
	  ) or pod2usage( "Try '$script --man' for more information." );

#
# Check @ARGV
#
$usage_table{main}->($script) and exit(0) if $opt{help};
pod2usage( -verbose => 2 ) if $opt{man};
say $VERSION and exit(0) if $opt{version};

my $method = shift;
if (!defined $method) {
    say STDERR "\nERROR: Command line not parsed correctly. Check input.\n";
    $usage_table{main}->($script);
    exit(1);
}

if ($opt{compress}) {
    unless ($opt{compress} eq 'gzip' || $opt{compress} eq 'bzip2') {
	say STDERR "\nERROR: '$opt{compress}' is not recognized as an argument to the --compress option.".
	    " Must be 'gzip' or 'bzip2'. Exiting.\n";
	exit(1);
    }
}

my %method_table = (
    'addinfo'    => \&add_pair_info,
    'makepairs'  => \&makepairs,
    'joinpairs'  => \&pairs_to_interleaved,
    'splitpairs' => \&interleaved_to_pairs,
 );

if (exists $method_table{$method}) {
    $method_table{$method}->(\%opt, \%usage_table, $script);
}
else {
    say STDERR "\nERROR: '$method' is not recognized. See the manual by typing '$script -m',".
	" or see https://github.com/sestaton/Pairfq.\n";
    exit(1);
}

exit;
#
# Methods
#
sub add_pair_info {
    my ($opt, $usage_table, $script) = @_;
    my ($pairnum, $infile, $outfile, $compress, $uppercase) = 
	map { defined $opt->{$_} ? $opt->{$_} : undef } qw(pairnum infile outfile compress uppercase);

    if (!$pairnum || !$infile || !$outfile) {
	say STDERR "\nERROR: Command line not parsed correctly. Check input.\n";
	$usage_table->{addinfo}->($script);
	exit(1);
    }
    
    no warnings 'io';
    my $pair;
    if ($pairnum == 1) {
	$pair = "/1";
    }
    elsif ($pairnum == 2) {
	$pair = "/2";
    }
    else {
	say STDERR "\nERROR: $pairnum is not correct. Must be 1 or 2. Exiting.";
	exit(1);
    }

    my $fh;
    if (-p $infile) {
	open $fh, $infile or die "\nERROR: Could not open process: $infile\n";
    }
    else { 
	$fh = get_fh($infile);
    }
    my $out = get_outfh($outfile, $compress);

    my @aux = undef;
    my ($name, $comm, $seq, $qual);

    while (($name, $comm, $seq, $qual) = readfq(\*$fh, \@aux)) {
	$seq = uc($seq) if $uppercase;
	say $out join "\n", "@".$name.$pair, $seq, "+", $qual if defined $qual;
	say $out join "\n", ">".$name.$pair, $seq if !defined $qual;
    }
    close $fh;
    close $out;

    return;
}

sub makepairs {
    my ($opt, $usage_table, $script) = @_;
    my ($infile, $fread, $rread, $fpread, $rpread, $fsread, $rsread, $compress, $stats, $index) =
	map { defined $opt->{$_} ? $opt->{$_} : undef } 
            qw(infile forward reverse forw_paired rev_paired forw_unpaired rev_unpaired compress stats index);

    if ($infile && $fpread && $rpread && $fsread && $rsread) {
	interleaved_to_pairs_and_singles($script, $infile, $fpread, $rpread, $fsread, 
					 $rsread, $compress, $stats);
    }
    elsif (!$infile && $fread && $rread && $fpread && $rpread && $fsread && $rsread) {
	make_pairs_and_singles($script, $fread, $rread, $fpread, $rpread, $fsread, 
			       $rsread, $index, $compress, $stats);
    }
    else {
	say STDERR "\nERROR: Command line not parsed correctly. Check input.\n";
            $usage_table->{makepairs}->($script);
	exit(1);
    }

    return;
}

sub make_pairs_and_singles {
    my ($script, $fread, $rread, $fpread, $rpread, $fsread, $rsread, $index, $compress, $stats) = @_;

    my ($rseqpairs, $db_file, $rct) = store_pair($rread, $index);

    local @SIG{qw(INT TERM HUP)} = sub { untie %$rseqpairs if defined $index; unlink $db_file if -e $db_file; };

    my @faux = undef;
    my ($fname, $fcomm, $fseq, $fqual, $forw_id, $rev_id);
    my ($fct, $fpct, $rpct, $pct, $fsct, $rsct, $sct) = (0, 0, 0, 0, 0, 0, 0);

    my $fh;
    if (-p $fread) {
        open $fh, $fread or die "\nERROR: Could not open process: $fread\n";
    }
    else {
        $fh = get_fh($fread);
    }
    #my $fh = get_fh($fread);
    my $fp = get_outfh($fpread, $compress);
    my $rp = get_outfh($rpread, $compress);
    my $fs = get_outfh($fsread, $compress);

    while (($fname, $fcomm, $fseq, $fqual) = readfq(\*$fh, \@faux)) {
	$fct++;
	my ($base_name, $base_comm, $fwd_format_info) = parse_pair_format($fname, $fcomm);

	if (exists $rseqpairs->{$base_name}) {
	    $fpct++; 
	    $rpct++;
	    my ($rread, $rqual_r, $rev_format_info) = mk_vec($rseqpairs->{$base_name});
	    
	    my ($fwd_name, $fwd_comm) = reconstruct_format($base_name, $base_comm, $fwd_format_info);
	    my ($rev_name, $rev_comm) = reconstruct_format($base_name, $base_comm, $rev_format_info);
	    
	    if (defined $fqual) {
		if (defined $fwd_comm && $fwd_comm ne '') {
		    say $fp join "\n", "@".$fwd_name." ".$fwd_comm, $fseq, "+", $fqual;
		} else {
		    say $fp join "\n", "@".$fwd_name, $fseq, "+", $fqual;
		}
		
		if ($rqual_r ne '' && defined $rqual_r) {
		    if (defined $rev_comm && $rev_comm ne '') {
			say $rp join "\n", "@".$rev_name." ".$rev_comm, $rread, "+", $rqual_r;
		    } else {
			say $rp join "\n", "@".$rev_name, $rread, "+", $rqual_r;
		    }
		}
	    } 
	    else {
		if (defined $fwd_comm && $fwd_comm ne '') {
		    say $fp join "\n", ">".$fwd_name." ".$fwd_comm, $fseq;
		} else {
		    say $fp join "\n", ">".$fwd_name, $fseq;
		}
		
		if (defined $rev_comm && $rev_comm ne '') {
		    say $rp join "\n", ">".$rev_name." ".$rev_comm, $rread;
		} else {
		    say $rp join "\n", ">".$rev_name, $rread;
		}
	    }
	    delete $rseqpairs->{$base_name};
	} 
	else {
	    $fsct++;
	    my ($fwd_name, $fwd_comm) = reconstruct_format($base_name, $base_comm, $fwd_format_info);
	    
	    if (defined $fqual) {
		if (defined $fwd_comm && $fwd_comm ne '') {
		    say $fs join "\n", "@".$fwd_name." ".$fwd_comm, $fseq, "+", $fqual;
		} else {
		    say $fs join "\n", "@".$fwd_name, $fseq, "+", $fqual;
		}
	    } 
	    else {
		if (defined $fwd_comm && $fwd_comm ne '') {
		    say $fs join "\n", ">".$fwd_name." ".$fwd_comm, $fseq;
		} else {
		    say $fs join "\n", ">".$fwd_name, $fseq;
		}
	    }
	}
    }
    close $fh;
    close $fp;
    close $rp;
    close $fs;

    my $rs = get_outfh($rsread, $compress);

    while (my ($base_name_up, $rseq_data) = each %$rseqpairs) {
	$rsct++;
	my ($rseq_up, $rqual_up, $rev_format_info) = mk_vec($rseq_data);
	
	my ($rev_name, $rev_comm) = reconstruct_format($base_name_up, undef, $rev_format_info);
    
	if (defined $rqual_up && $rqual_up ne '') {
	    if (defined $rev_comm && $rev_comm ne '') {
		say $rs join "\n", "@".$rev_name." ".$rev_comm, $rseq_up, "+", $rqual_up;
	    } else {
		say $rs join "\n", "@".$rev_name, $rseq_up, "+", $rqual_up;
	    }
	}
	else {
	    if (defined $rev_comm && $rev_comm ne '') {
		say $rs join "\n", ">".$rev_name." ".$rev_comm, $rseq_up;
	    } else {
		say $rs join "\n", ">".$rev_name, $rseq_up;
	    }
	}
    }
    close $rs;

    $pct = $fpct + $rpct;
    $sct = $fsct + $rsct;
    untie %$rseqpairs if defined $index;
    unlink $db_file if -e $db_file;

    if (defined $stats) {
	my $maxfn = max(length($fread), length($rread), length($fpread), length($rpread), length($fsread), length($rsread));
	my $offset = $maxfn + 38;
	my $date = qx(date); chomp $date;
	say "========= $script version : $VERSION (completion time: $date)";
	printf "%-${offset}s %s %10d\n", "Total forward reads ($fread)", ":",$fct;
	printf "%-${offset}s %s %10d\n", "Total reverse reads ($rread)", ":", $rct;
	printf "%-${offset}s %s %10d\n", "Total forward paired reads ($fpread)", ":", $fpct;
	printf "%-${offset}s %s %10d\n", "Total reverse paired reads ($rpread)", ":", $rpct;
	printf "%-${offset}s %s %10d\n", "Total forward unpaired reads ($fsread)", ":", $fsct;
	printf "%-${offset}s %s %10d\n\n", "Total reverse unpaired reads ($rsread)", ":", $rsct;
	printf "%-${offset}s %s %10d\n", "Total paired reads", ":",  $pct;
	printf "%-${offset}s %s %10d\n", "Total unpaired reads", ":", $sct;
    }
    
    return;
}

sub interleaved_to_pairs_and_singles {
    my ($script, $infile, $fpread, $rpread, $fsread, $rsread, $compress, $stats) = @_;

    my $fh;
    if (-p $infile) {
        open $fh, $infile or die "\nERROR: Could not open process: $infile\n";
    }
    else {
        $fh = get_fh($infile);
    }
    #my $fh = get_fh($infile);
    my $fp = get_outfh($fpread, $compress);
    my $rp = get_outfh($rpread, $compress);
    my $fs = get_outfh($fsread, $compress);
    my $rs = get_outfh($rsread, $compress);

    my @aux = undef;
    my ($fct, $rct, $fpct, $rpct, $pct, $fsct, $rsct, $sct, $pair) = (0, 0, 0, 0, 0, 0, 0, 0, 0);
    my %singles;
    my ($fpairname, $rpairname);
    my ($name, $comm, $seq, $qual);
    my ($fname, $fcomm, $fseq, $fqual, $rname, $rcomm, $rseq, $rqual);

    while (($name, $comm, $seq, $qual) = readfq(\*$fh, \@aux)) {
	if ($name =~ /\/1$/) {
	    $fct++;
	    $pair = 1;
	    ($fname, $fpairname, $fseq, $fqual) = ($name, $name, $seq, $qual);
	    $fpairname =~ s/\/1//;
	    $singles{$fname} = { name => $fname, seq => $fseq, qual => $fqual, pair => $pair };
	}
	elsif (defined $comm && $comm =~ /^1/) {
	    $fct++;
	    $pair = 1;
	    ($fname, $fpairname, $fseq, $fcomm, $fqual) = ($name, $name, $seq, $comm, $qual);
	    $singles{$fname} = { name => $fname, seq => $fseq, comm => $fcomm, qual => $fqual, pair => $pair };
	}
	elsif ($name =~ /\/2$/) {
	    $rct++;
	    $pair = 2;
	    ($rname, $rpairname, $rseq, $rqual) = ($name, $name, $seq, $qual);
	    $rpairname =~ s/\/2//;
	    $singles{$rname} = { name => $rname, seq => $rseq, qual => $rqual, pair => $pair };
	}
	elsif (defined $comm && $comm =~ /^2/) {
	    $rct++;
	    $pair = 2;
	    ($rname, $rpairname, $rseq, $rcomm, $rqual) = ($name, $name, $seq, $comm, $qual);
	    $singles{$rname} = { name => $rname, seq => $rseq, comm => $rcomm, qual => $rqual, pair => $pair };
	}

	next unless defined $fpairname && defined $rpairname;
	if ($fpairname eq $rpairname) {
	    $fpct++;
	    $rpct++;
	    say $fp join "\n", ">".$fname, $fseq 
	          if !defined $fqual && !defined $fcomm;
	    say $fp join "\n", ">".$fname." ".$fcomm, $fseq 
	        if !defined $fqual && defined $fcomm;
	    say $fp join "\n", "@".$fname, $fseq, "+", $fqual 
	        if defined $fqual && !defined $fcomm;
	    say $fp join "\n", "@".$fname." ".$fcomm, $fseq, "+", $fqual 
	        if defined $fqual && defined $fcomm;
	    
	    say $rp join "\n", ">".$rname, $rseq 
	        if !defined $rqual && !defined $rcomm;
	    say $rp join "\n", ">".$rname." ".$rcomm, $rseq 
	        if !defined $rqual && defined $rcomm;
	    say $rp join "\n", "@".$rname, $rseq, "+", $rqual 
	        if defined $rqual && !defined $rcomm;
	    say $rp join "\n", "@".$rname." ".$rcomm, $rseq, "+", $rqual 
	        if defined $rqual && defined $rcomm;
	    delete $singles{$fname};
	    delete $singles{$rname};
	}
	$pair = 0;
    }
    close $fh;
    close $fp;
    close $rp;

    for my $id (keys %singles) {
	my $sfh;
	if ($singles{$id}->{'pair'} == 1) {
	    $fsct++;
	    $sfh = $fs;
	}
	else {
	    $rsct++;
	    $sfh = $rs;
	}

	say $sfh join "\n", ">".$singles{$id}->{'name'}, $singles{$id}->{'seq'} 
	    if !defined $singles{$id}->{'qual'} && !defined $singles{$id}->{'comm'};
	say $sfh join "\n", ">".$singles{$id}->{'name'}." ".$singles{$id}->{'comm'}, $singles{$id}->{'seq'} 
	    if !defined $singles{$id}->{'qual'} && defined $singles{$id}->{'comm'};
	say $sfh join "\n", "@".$singles{$id}->{'name'}, $singles{$id}->{'seq'}, "+", $singles{$id}->{'qual'} 
	    if defined $singles{$id}->{'qual'} && !defined $singles{$id}->{'comm'};
	say $sfh join "\n", "@".$singles{$id}->{'name'}." ".$singles{$id}->{'comm'}, $singles{$id}->{'seq'}, "+", $singles{$id}->{'qual'} 
	    if defined $singles{$id}->{'qual'} && defined $singles{$id}->{'comm'};
    }
    close $fs;
    close $rs;

    $pct = $fpct + $rpct;
    $sct = $fsct + $rsct;

    if (defined $stats) {
        my $maxfn = max(length($infile), length($fpread), length($rpread), length($fsread), length($rsread));
        my $offset = $maxfn + 38;
        my $date = qx(date); chomp $date;
        say "========= $script version : $VERSION (completion time: $date)";
        printf "%-${offset}s %s %10d\n", "Total forward reads ($infile)", ":",$fct;
        printf "%-${offset}s %s %10d\n", "Total reverse reads ($infile)", ":", $rct;
        printf "%-${offset}s %s %10d\n", "Total forward paired reads ($fpread)", ":", $fpct;
        printf "%-${offset}s %s %10d\n", "Total reverse paired reads ($rpread)", ":", $rpct;
        printf "%-${offset}s %s %10d\n", "Total forward unpaired reads ($fsread)", ":", $fsct;
        printf "%-${offset}s %s %10d\n\n", "Total reverse unpaired reads ($rsread)", ":", $rsct;
        printf "%-${offset}s %s %10d\n", "Total paired reads", ":",  $pct;
        printf "%-${offset}s %s %10d\n", "Total unpaired reads", ":", $sct;
    }

    return;
}

sub pairs_to_interleaved {
    my ($opt, $usage_table, $script) = @_;
    my ($forward, $reverse, $outfile, $index, $compress) =
	map { defined $opt->{$_} ? $opt->{$_} : undef } qw(forward reverse outfile index compress);

    if (!$forward || !$reverse || !$outfile) {
	say STDERR "\nERROR: Command line not parsed correctly. Check input.\n";
	$usage_table->{joinpairs}->($script);
	exit(1);
    }

    my ($pairs, $db_file, $ct) = store_pair($forward, $index);

    local @SIG{qw(INT TERM HUP)} = sub { untie %$pairs if defined $index; unlink $db_file if -e $db_file; };

    my $fh;
    if (-p $reverse) {
        open $fh, $reverse or die "\nERROR: Could not open process: $reverse\n";
    }
    else {
        $fh = get_fh($reverse);
    }
    #my $fh  = get_fh($reverse);
    my $out = get_outfh($outfile, $compress);

    my @raux = undef;
    my ($rname, $rcomm, $rseq, $rqual);

    while (($rname, $rcomm, $rseq, $rqual) = readfq(\*$fh, \@raux)) {
	my ($base_name, $base_comm, $rev_format_info) = parse_pair_format($rname, $rcomm);

	if (exists $pairs->{$base_name}) {
	    my ($seqf, $qualf, $fwd_format_info) = mk_vec($pairs->{$base_name});
	    
	    my ($fwd_name, $fwd_comm) = reconstruct_format($base_name, $base_comm, $fwd_format_info);
	    my ($rev_name, $rev_comm) = reconstruct_format($base_name, $base_comm, $rev_format_info);
	    
	    if (defined $rqual) {
		if (defined $fwd_comm && $fwd_comm ne '') {
		    say $out join "\n", "@".$fwd_name." ".$fwd_comm, $seqf, "+", $qualf;
		} else {
		    say $out join "\n", "@".$fwd_name, $seqf, "+", $qualf;
		}
		if (defined $rev_comm && $rev_comm ne '') {
		    say $out join "\n", "@".$rev_name." ".$rev_comm, $rseq, "+", $rqual;
		} else {
		    say $out join "\n", "@".$rev_name, $rseq, "+", $rqual;
		}
	    }
	    else {
		if (defined $fwd_comm && $fwd_comm ne '') {
		    say $out join "\n", ">".$fwd_name." ".$fwd_comm, $seqf;
		} else {
		    say $out join "\n", ">".$fwd_name, $seqf;
		}
		if (defined $rev_comm && $rev_comm ne '') {
		    say $out join "\n", ">".$rev_name." ".$rev_comm, $rseq;
		} else {
		    say $out join "\n", ">".$rev_name, $rseq;                                               
		}
	    }
	}
    }
    close $fh;
    close $out;

    untie %$pairs if defined $index;
    unlink $db_file if -e $db_file;

    return;
}

sub interleaved_to_pairs {
    my ($opt, $usage_table, $script) = @_;
    my ($infile, $forward, $reverse, $compress) =
	map { defined $opt->{$_} ? $opt->{$_} : undef } qw(infile forward reverse compress);

    if (!$infile || !$forward || !$reverse) {
	say STDERR "\nERROR: Command line not parsed correctly. Check input.\n";
	$usage_table->{splitpairs}->($script);
	exit(1);
    }

    my $fh;
    if (-p $infile) {
        open $fh, $infile or die "\nERROR: Could not open process: $infile\n";
    }
    else {
        $fh = get_fh($infile);
    }
    #my $fh = get_fh($infile);
    my $f  = get_outfh($forward, $compress);
    my $r  = get_outfh($reverse, $compress);

    my @aux = undef;
    my ($name, $comm, $seq, $qual);

    while (($name, $comm, $seq, $qual) = readfq(\*$fh, \@aux)) {
	if (defined $comm && $comm =~ /^1/ || $name =~ /\/1$/) {
	    say $f join "\n", ">".$name, $seq if !defined $qual && !defined $comm;
	    say $f join "\n", ">".$name." ".$comm, $seq if !defined $qual && defined $comm;
	    say $f join "\n", "@".$name, $seq, "+", $qual if defined $qual && !defined $comm;
	    say $f join "\n", "@".$name." ".$comm, $seq, "+", $qual if defined $qual && defined $comm;
	}
	elsif (defined $comm && $comm =~ /^2/ || $name =~ /\/2$/) {
	    say $r join "\n", ">".$name, $seq if !defined $qual && !defined $comm;
	    say $r join "\n", ">".$name." ".$comm, $seq if !defined $qual && defined $comm;
	    say $r join "\n", "@".$name, $seq, "+", $qual if defined $qual && !defined $comm;
	    say $r join "\n", "@".$name." ".$comm, $seq, "+", $qual if defined $qual && defined $comm;
	}
    }
    close $fh;
    close $f;
    close $r;

    exit;
}

sub get_fh {
    my ($file) = @_;

    unless ($file =~ /^-$|STDIN/i) {
	load_classes('Cwd');
	$file = Cwd::abs_path($file);
    }

    my $fh;
    if ($file =~ /\.gz$/) {
        open $fh, '-|', 'zcat', $file or die "\nERROR: Could not open file: $file\n";
    }
    elsif ($file =~ /\.bz2$/) {
        open $fh, '-|', 'bzcat', $file or die "\nERROR: Could not open file: $file\n";
    }
    elsif ($file =~ /^-$|STDIN/i) {
	open $fh, '<&', \*STDIN or die "\nERROR: Could not open STDIN\n";
    }
    else {
        open $fh, '<', $file or die "\nERROR: Could not open file: $file\n";
    }

    return $fh;
}

sub get_outfh {
    my ($file, $compress) = @_;

    unless ($file =~ /^-$|STDOUT/i) {
	load_classes('Cwd');
	$file = Cwd::abs_path($file);
    }

    my $fh;
    if (defined $compress) {
	if ($compress eq 'gzip') {
	    $file .= ".gz" if $file !~ /\.gz$/;
	    open $fh, '|-', "gzip > $file" or die "\nERROR: Could not open file: $file\n";
	}
	elsif ($compress eq 'bzip2') {
	    $file .= ".bz2" if $file !~ /\.bz2$/;
	    open $fh, '|-', "bzip2 > $file" or die "\nERROR: Could not open file: $file\n";
	}
    }
    else {
	if ($file =~ /^-$|STDOUT/i) {
	    open $fh, '>&', \*STDOUT or die "\nERROR: Could not open STDOUT\n";
	}
	else {
	    open $fh, '>', $file or die "\nERROR: Could not open file: $file\n";
	}
    }

    return $fh;
}

sub store_pair {
    my ($file, $index) = @_;

    load_classes('Cwd', 'File::Temp', 'DBI', 'DBD::SQLite', 'Tie::Hash::DBD');

    my $rct = 0;
    my %rseqpairs;

    my $cwd = Cwd::getcwd();
    my $db_file = File::Temp->new( TEMPLATE => "pairfq_XXXX",
				   DIR      => $cwd,
				   SUFFIX   => ".db",
				   UNLINK   => 0 );
    unlink $db_file if -e $db_file;

    if (defined $index) {
	my $dsn    = "dbi:SQLite:dbname=$db_file";
        my $user   = "";
        my $pass   = "";

	tie %rseqpairs, "Tie::Hash::DBD", $dsn, {
	    PrintError       => 0, 
	    RaiseError       => 1,
	    AutoCommit       => 1,
	    FetchHashKeyName => 'NAME_lc'
	};
    }
    
    my @raux = undef;
    my ($rname, $rcomm, $rseq, $rqual);

    my $fh;
    if (-p $file) {
        open $fh, $file or die "\nERROR: Could not open process: $file\n";
    }
    else {
        $fh = get_fh($file);
    }

    {
	local @SIG{qw(INT TERM HUP)} = sub { 
	    untie %rseqpairs if defined $index; 
	    unlink $db_file if -e $db_file; 
	};

	while (($rname, $rcomm, $rseq, $rqual) = readfq(\*$fh, \@raux)) {
	    $rct++;
	    my ($base_name, $base_comm, $format_info) = parse_pair_format($rname, $rcomm);

	    if (defined $rqual) {
		$rseqpairs{$base_name} = mk_key($rseq, $rqual, $format_info);
	    } else {
		$rseqpairs{$base_name} = mk_key($rseq, '', $format_info);
	    }
	}
	close $fh;
    }
    return (\%rseqpairs, $db_file, $rct);
}

sub readfq {
    my ($fh, $aux) = @_;
    @$aux = [undef, 0] if (!@$aux);
    return if ($aux->[1]);
    if (!defined($aux->[0])) {
        while (<$fh>) {
            chomp;
            if (substr($_, 0, 1) eq '>' || substr($_, 0, 1) eq '@') {
                $aux->[0] = $_;
                last;
            }
        }
        if (!defined($aux->[0])) {
            $aux->[1] = 1;
            return;
        }
    }
    my ($name, $comm);
    defined $_ && do {
        ($name, $comm) = /^.(\S+)(?:\s+)(\S+)/ ? ($1, $2) : 
	                 /^.(\S+)/ ? ($1, '') : ('', '');
    };
    my $seq = '';
    my $c;
    $aux->[0] = undef;
    while (<$fh>) {
        chomp;
        $c = substr($_, 0, 1);
        last if ($c eq '>' || $c eq '@' || $c eq '+');
        $seq .= $_;
    }
    $aux->[0] = $_;
    $aux->[1] = 1 if (!defined($aux->[0]));
    return ($name, $comm, $seq) if ($c ne '+');
    my $qual = '';
    while (<$fh>) {
        chomp;
        $qual .= $_;
        if (length($qual) >= length($seq)) {
            $aux->[0] = undef;
            return ($name, $comm, $seq, $qual);
        }
    }
    $aux->[1] = 1;
    return ($name, $seq);
}

sub load_classes {
    my @classes = @_;

    for my $class (@classes) {
	eval {
	    eval "require $class";
	    $class->import();
	    1;
	} or do {
	    my $error = $@;
	    die "\nERROR: The module $class is required but it couldn't be loaded. ".
		"Here is the exception: $error." if $error;
	};
    }
}

sub parse_pair_format {
    my ($name, $comm) = @_;
    my ($base_name, $base_comm, $format_info) = ($name, $comm, 'none');
    
    # Pattern 1: /1 or /2 in sequence name
    if ($name =~ /(\/[12])$/) {
        $format_info = "name$1";
        $base_name =~ s/\/[12]$//;
    }
    # Pattern 2: 1: or 2: at start of comment  
    elsif (defined $comm && $comm =~ /^([12]:)/) {
        $format_info = "comm_start$1";
        $base_comm =~ s/^[12]://;
        $base_name = mk_key($base_name, $base_comm);
    }
    # Pattern 3: /1 or /2 at end of comment
    elsif (defined $comm && $comm =~ /(\/[12])$/) {
        $format_info = "comm_end$1";
        $base_comm =~ s/\/[12]$//;
        $base_name = mk_key($base_name, $base_comm);
    }
    
    return ($base_name, $base_comm, $format_info);
}

sub reconstruct_format {
    my ($base_name, $base_comm, $format_info) = @_;
    my ($out_name, $out_comm);
    
    if ($format_info =~ /^name(\/[12])$/) {
        $out_name = $base_name . $1;
        $out_comm = $base_comm;
    }
    elsif ($format_info =~ /^comm_start([12]:)$/) {
        my $pair_prefix = $1;
        if ($base_name =~ /\|\|/) {
            my ($name, $comm) = mk_vec($base_name);
            $out_name = $name;
            $out_comm = $pair_prefix . $comm;
        } else {
            $out_name = $base_name;
            $out_comm = $pair_prefix . ($base_comm || '');
        }
    }
    elsif ($format_info =~ /^comm_end(\/[12])$/) {
        my $pair_suffix = $1;
        if ($base_name =~ /\|\|/) {
            my ($name, $comm) = mk_vec($base_name);
            $out_name = $name;
            $out_comm = $comm . $pair_suffix;
        } else {
            $out_name = $base_name;
            $out_comm = ($base_comm || '') . $pair_suffix;
        }
    }
    else {
        # No format info or unrecognized format - return as is
        $out_name = $base_name;
        $out_comm = $base_comm;
    }
    
    return ($out_name, $out_comm);
}

sub mk_key { return join "||", @_ }

sub mk_vec { return split /\|\|/, shift }

sub max {
    my $max = shift;
    for (@_) { $max = $_ if $_ > $max }
    return $max;
}

sub usage {
    my ($script) = @_;
    print STDERR<<EOF
USAGE: $script [-h] [-m] [--version]

Required:
    addinfo           :      Add the pair info back to the FASTA/Q header.
    makepairs         :      Pair the forward and reverse reads and write singletons 
                             for both forward and reverse reads to separate files.
    joinpairs         :      Interleave the paired forward and reverse files.
    splitpairs        :      Split the interleaved file into separate files for the 
                             forward and reverse reads.

Options:
    --version         :       Print the program version and exit.
    -h|help           :       Print a usage statement.
    -m|man            :       Print the full documentation.

EOF
}

sub makepairs_usage {
    my ($script) = @_;
    print STDERR<<EOF
USAGE: $script makepairs [-i] [-f] [-r] [-fp] [-rp] [-fs] [-rs] [-idx] [-c] [-s] [-h] [-m]

Required:
    -i|infile         :       File of interleaved forward and reverse reads that has been trimmed.
                              As below, the forward and reverse reads must be labeled in the name
                              or comment.
    -f|forward        :       File of foward reads (usually with "/1" or " 1" in the header).
    -r|reverse        :       File of reverse reads (usually with "/2" or " 2" in the header).
    -fp|forw_paired   :       Name for the file of paired forward reads.
    -rp|rev_paired    :       Name for the file of paired reverse reads.
    -fs|forw_unpaired :       Name for the file of singleton forward reads.
    -rs|rev_unpaired  :       Name for the file of singleton reverse reads.

Options:
    -idx|index        :       Construct an index for limiting memory usage (only applies to pairing reads
                              from separate files, not from an interleaved file).
                              NB: This may result in long run times for a large number of sequences. 
    -c|compress       :       Compress the output files. Options are 'gzip' or 'bzip2' (Default: No).
    -s|stats          :       Print statistics on the pairing results to STDOUT (Default: No).
    -h|help           :       Print a usage statement.
    -m|man            :       Print the full documentation.

EOF
}

sub addinfo_usage {
    my ($script) = @_;
    print STDERR<<EOF
USAGE: $script addinfo [-i] [-o] [-p] [-c] [-uc] [-h] [-m]

Required:
    -i|infile        :       The file of sequences without the pair information in the sequence name.
    -o|outfile       :       The file of sequences that will contain the sequence names with the pair information.
    -p|pairnum       :       The number to append to the sequence name. Integer (Must be 1 or 2).

Options:
    -c|compress      :       Compress the output files. Options are 'gzip' or 'bzip2' (Default: No).
    -uc|uppercase    :       Convert the sequence to uppercase.
    -h|help          :       Print a usage statement.
    -m|man           :       Print the full documentation.

EOF
}

sub splitpairs_usage {
    my ($script) = @_;
    print STDERR<<EOF
USAGE: $script splitpairs [-i] [-f] [-r] [-c] [-h] [-m]

Required:
    -i|infile         :       File of interleaved forward and reverse reads.
    -f|forward        :       File to place the foward reads.
    -r|reverse        :       File to place the reverse reads.

Options:
    -c|compress       :       Compress the output files. Options are 'gzip' or 'bzip2' (Default: No).
    -h|help           :       Print a usage statement.
    -m|man            :       Print the full documentation.

EOF
}

sub joinpairs_usage {
    my ($script) = @_;
    print STDERR<<EOF
USAGE: $script joinpairs [-f] [-r] [-o] [-idx] [-c] [-h] [-m]

Required:
    -f|forward        :       File of foward reads (usually with "/1" or " 1" in the header).
    -r|reverse        :       File of reverse reads (usually with "/2" or " 2" in the header).
    -o|outfile        :       File of interleaved reads.

Options:
    -idx|index        :       Construct an index for limiting memory usage.
                              NB: This may result in long run times for a large number of sequences.
    -c|compress       :       Compress the output files. Options are 'gzip' or 'bzip2' (Default: No).
    -h|help           :       Print a usage statement.
    -m|man            :       Print the full documentation.

EOF
}

__END__

=head1 NAME 
                                                                       
pairfq - Sync paired-end sequences from separate FASTA/Q files

=head1 SYNOPSIS    

## Add pair information back to the reads

pairfq addinfo -i s_1_1_trim.fq -o s_1_1_trim_info.fq -p 1

pairfq addinfo -i s_1_2_trim.fq -o s_1_2_trim_info.fq -p 2

## Sync paired-end reads and write singleton reads to separate files

pairfq makepairs -f s_1_1_trim_info.fq -r s_1_2_trim_info.fq -fp s_1_1_trim_paired.fq -rp s_1_2_trim_paired.fq -fs s_1_1_trim_unpaired.fq -rs s_1_2_trim_unpaired.fq --stats

OR

pairfq makepairs -i s_interl_trimmed.fq -fp s_1_1_trim_paired.fq -rp s_1_2_trim_paired.fq -fs s_1_1_trim_unpaired.fq -rs s_1_2_trim_unpaired.fq --stats

## Interleave the paired-end reads

pairfq joinpairs -f s_1_1_trim_paired.fq -r s_1_2_trim_paired.fq -o s_1_interl.fq

## Split the interleaved reads into separate forward and reverse files

pairfq splitpairs -i s_1_interl.fq -f s_1_1_trim_p.fq -r s_1_2_trim_p.fq

=head1 DESCRIPTION
     
Re-pair paired-end sequences that may have been separated by quality trimming.
This script also writes the unpaired forward and reverse sequences to separate 
files so that they may be used for assembly or mapping. The input may be FastA
or FastQ format in either Illumina 1.3+ or Illumina 1.8 format. The input files
may be compressed with gzip or bzip2. Optionally, the script can interleave paired
files, separate interleaved files into separate forward and reverse files, and 
fix paired-end files which have lost the pair information. 

=head1 DEPENDENCIES

The modules DBD::SQLite and Tie::Hash::DBD are required for the indexing methods. 
See below for information on which Perls have been tested.

=head1 LICENSE
 
The MIT License should included with the project. If not, it can be found at: http://opensource.org/licenses/mit-license.php

Copyright (C) 2013-2024 S. Evan Staton
 
=head1 TESTED WITH:

=over

=item *
Perl 5.10.1 (Ubuntu 12.04.3 LTS)

=item *
Perl 5.12.5 (Ubuntu 12.04.3 LTS)

=item *
Perl 5.14.1 (Red Hat Enterprise Linux Server release 5.7 (Tikanga))

=item *
Perl 5.14.2 (Red Hat Enterprise Linux Desktop release 6.2 (Santiago); Fedora 17)

=item *
Perl 5.14.4 (Ubuntu 12.04.3 LTS)

=item *
Perl 5.16.0 (Red Hat Enterprise Linux Server release 5.9 (Tikanga))

=item *
Perl 5.16.3 (Ubuntu 12.04.3 LTS)

=item *
Perl 5.18.0 (Red Hat Enterprise Linux Server release 5.9 (Tikanga))

=item *
Perl 5.18.1 (Ubuntu 12.04.3 LTS)

=item *
Perl 5.20.1 (Red Hat Enterprise Linux Server release 5.9 (Tikanga))

=item *
Perl 5.34.2 (Ubuntu 22 LTS)

=back

=head1 AUTHOR 

S. Evan Staton                                                

=head1 CONTACT
 
evan at evanstaton dot com

=head1 REQUIRED ARGUMENTS

=over 2

=item The method to perform. Must be one of: 'addinfo', 'makepairs', 'joinpairs', or 'splitpairs'.

  addinfo    | Add the pair info back to the FASTA/Q header.
  makepairs  | Pair the forward and reverse reads and write singletons for both forward and reverse reads to separate files.
  joinpairs  | Interleave the paired forward and reverse files.
  splitpairs | Split the interleaved file into separate files for the forward and reverse reads.

=back

=head1 OPTIONS

=over 2

=item -i, --infile

  For the 'addinfo' method, this would be any FASTA/Q file (or STDIN). For the 'splitpairs' method,
  this would be either the forward or reverse file from a paired-end sequencing run. For the
  'makepairs' method, this would be the interleaved file of forward and reverse reads that
  has been trimmed.

=item -o, --outfile

  The outfile for the 'addinfo' or 'joinpairs' methods (may be STDOUT instead of a file).

=item -f, --forward

  The file of forward sequences from an Illumina paired-end sequencing run.

=item -r, --reverse

  The file of reverse sequences from an Illumina paired-end sequencing run.

=item -fp, --forw_paired

  The output file to place the paired forward reads.

=item -rp, --rev_paired

  The output file to place the paired reverse reads. 

=item -fs, --forw_unpaired

  The output file to place the unpaired forward reads. 

=item -rs, --rev_unpaired

  The output file to place the unpaired reverse reads. 

=item -p, --pairnum

  The pair number to add to the file with the 'addinfo' method. Should be either '1' or '2' and other arguments
  with generate an exception.

=item -idx, --index

  The computation should be not be in memory but on disk. This will be much slower, but it will not use hardly any
  RAM, even if there are many millions of sequences in each input file.

=item -c, --compress

  The output files should be compressed. If given, this option must be given the arguments 'gzip' to compress with gzip,
  or 'bzip2' to compress with bzip2.

=item -uc, --uppercase

 For the 'addinfo' method, uppercase the sequence.

=item -s, --stats

 For the 'makepairs' method, print (to STDOUT) statistics for paired/unpaired forward and reverse reads. This is useful for
 record keeping and debugging. The reason this is not the default is that people may want to run multiple instances of this
 command and redirect the output to the same file or to another program.

=item --version

 Get the program version and exit.

=item -h, --help

  Print a usage statement. 

=item -m, --man
  
  Print the full documentation.

=back

=cut
